# Package ######################################################################

[build-system]
requires = ["setuptools >= 60.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "omnisafe"
description = "A comprehensive and reliable benchmark for safe reinforcement learning."
readme = "README.md"
requires-python = ">= 3.8"
authors = [{ name = "OmniSafe Contributors" }]
license = { text = "Apache License, Version 2.0" }
keywords = ["Safe Reinforcement Learning", "Reinforcement Learning", "PyTorch"]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "safety-gymnasium@git+https://github.com/sudo-michael/safety-gymnasium",
    "torch >= 1.10.0",
    "numpy >= 1.20.0",
    "tensorboard >= 2.8.0",
    "wandb >= 0.13.0",
    "pyyaml >= 6.0",
    "moviepy >= 1.0.0",
    "typing-extensions >= 4.0.0",
    "typer[all] >= 0.7.0",
    "seaborn >= 0.12.2",
    "pandas == 2.0.3",
    "matplotlib >= 3.7.1",
    "gdown >= 4.6.0",
    "pytorch_lightning >= 2.2.2",
    "cvxopt== 1.3.2",
    "gpytorch== 1.11",
    "joblib == 1.3.2",
    "qpth == 0.0.16",
    "scikit_learn == 1.3.2",
]
dynamic = ["version", "entry-points"]

[project.urls]
Homepage = "https://github.com/PKU-Alignment/omnisafe"
Repository = "https://github.com/PKU-Alignment/omnisafe"
Documentation = "https://omnisafe.readthedocs.io"
"Bug Report" = "https://github.com/PKU-Alignment/omnisafe/issues"

[project.optional-dependencies]
lint = [
    "isort >= 5.11.0",
    "black >= 22.6.0",
    "pylint[spelling] >= 2.15.0",
    "mypy >= 0.990",
    "flake8",
    "flake8-bugbear",
    "ruff",
    "doc8",
    "pydocstyle",
    "pyenchant",
    "pre-commit",
]
test = ["pytest", "pytest-cov", "pytest-xdist"]

[project.scripts]
omnisafe = "omnisafe.utils.command_app:app"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["omnisafe", "omnisafe.*"]

# Linter tools #################################################################

[tool.black]
safe = true
line-length = 100
skip-string-normalization = true
# Sync with requires-python
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
atomic = true
profile = "black"
src_paths = ["omnisafe", "envs", "examples", "tests"]
extra_standard_library = ["typing_extensions"]
indent = 4
line_length = 100
lines_after_imports = 2
multi_line_output = 3

[tool.mypy]
python_version = 3.8
pretty = true
show_error_codes = true
show_error_context = true
show_traceback = true
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = true
strict_equality = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pydocstyle]
convention = "google"

[tool.doc8]
max-line-length = 500

[tool.codespell]
ignore-words = "docs/source/spelling_wordlist.txt"

# [tool.ruff]
# # Sync with requires-python
# target-version = "py38"
# line-length = 100
# src = ["omnisafe", "tests", "examples"]
# lint.select = [
#     "E",
#     "W",   # pycodestyle
#     "F",   # pyflakes
#     "UP",  # pyupgrade
#     "ANN", # flake8-annotations
#     "S",   # flake8-bandit
#     "BLE", # flake8-blind-except
#     "B",   # flake8-bugbear
#     "COM", # flake8-commas
#     "C4",  # flake8-comprehensions
#     "EXE", # flake8-executable
#     "ISC", # flake8-implicit-str-concat
#     "PIE", # flake8-pie
#     "PYI", # flake8-pyi
#     "Q",   # flake8-quotes
#     "RSE", # flake8-raise
#     "RET", # flake8-return
#     "SIM", # flake8-simplify
#     "TID", # flake8-tidy-imports
#     "RUF", # ruff
# ]
# lint.ignore = [
#     # E501: line too long
#     # W505: doc line too long
#     # too long docstring due to long example blocks
#     "E501",
#     "W505",
#     # ANN101: missing type annotation for `self` in method
#     # ANN102: missing type annotation for `cls` in classmethod
#     "ANN101",
#     "ANN102",
#     # ANN401: dynamically typed expressions (typing.Any) are disallowed
#     "ANN401",
#     # S101: use of `assert` detected
#     # internal use and may never raise at runtime
#     "S101",
#     # PLR0402: use from {module} import {name} in lieu of alias
#     # use alias for import convention (e.g., `import torch.nn as nn`)
#     "PLR0402",
# ]
# lint.typing-modules = ["omnisafe.typing"]
#
# [tool.ruff.lint.per-file-ignores]
# "__init__.py" = [
#     "F401", # unused-import
# ]
# "omnisafe/utils/command_app.py" = [
#     "B008", # function-call-argument-default
# ]
# "tests/**/*.py" = [
#     "ANN", # flake8-annotations
#     "S",   # flake8-bandit
#     "BLE", # flake8-blind-except
# ]
# "conftest.py" = [
#     "F401",   # unused-import
#     "ANN201", # missing-return-type-undocumented-public-function
#     "ANN001", # missing-type-function-argument
# ]
#
# "omnisafe/algorithms/off_policy/crabs.py" = [
#     "F401",   # unused-import
#     "ANN201", # missing-return-type-undocumented-public-function
#     "ANN001", # missing-type-function-argument
#     "ANN003", # Missing type annotation
#     "ANN202", # Missing return type annotation for private function
#     "ANN204", # Missing return type annotation for special method
#     "RET505", # Unnecessary `else` after `return` statement
# ]
#
# "omnisafe/envs/classic_control/envs_from_crabs.py" = [
#     "F401",   # unused-import
#     "ANN201", # missing-return-type-undocumented-public-function
#     "ANN001", # missing-type-function-argument
#     "ANN003", # Missing type annotation
#     "ANN202", # Missing return type annotation for private function
#     "ANN204", # Missing return type annotation for special method
#     "RET505", # Unnecessary `else` after `return` statement
# ]
#
# "omnisafe/common/control_barrier_function/crabs/utils.py" = [
#     "F401",   # unused-import
#     "ANN201", # missing-return-type-undocumented-public-function
#     "ANN001", # missing-type-function-argument
#     "ANN003", # Missing type annotation
#     "S113",   # Probable use of requests call without timeout
# ]
#
# "omnisafe/common/control_barrier_function/crabs/optimizers.py" = [
#     "F401",   # unused-import
#     "ANN201", # missing-return-type-undocumented-public-function
#     "ANN001", # missing-type-function-argument
#     "ANN003", # Missing type annotation
#     "RET505", # Unnecessary `else` after `return` statement
# ]
#
# "omnisafe/common/control_barrier_function/crabs/models.py" = [
#     "F401",   # unused-import
#     "ANN201", # missing-return-type-undocumented-public-function
#     "ANN001", # missing-type-function-argument
#     "ANN002", # Missing type annotation
#     "ANN003", # Missing type annotation
# ]
#
# [tool.ruff.lint.flake8-annotations]
# allow-star-arg-any = true
#
# [tool.ruff.lint.flake8-quotes]
# docstring-quotes = "double"
# multiline-quotes = "double"
# inline-quotes = "single"
#
# [tool.ruff.lint.flake8-tidy-imports]
# ban-relative-imports = "all"
#
# [tool.pytest.ini_options]
# filterwarnings = [
#     "error",
#     "ignore: distutils Version classes are deprecated. Use packaging.version instead.",
#     "ignore::DeprecationWarning",
# ]

[tool.pyright]
venvPath = "."
venv = ".venv"
typeCheckingMode = "off"

[dependency-groups]
dev = ["basedpyright>=1.28.5"]
